# This is a basic workflow to help you get started with Actions

name: Build

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
    paths:
      - 'src/**'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-2019

    env:
      Configuration: Release
      Project: WinScreenfetch
      Solution: WinScreenfetch.sln
      Bin: WinScreenfetch.exe

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
    
    # setup MSBuild
    - name: setup-msbuild
      uses: microsoft/setup-msbuild@v1

    - name: Setup NuGet.exe
      uses: nuget/setup-nuget@v1
    
    # Runs a multiple command using the runners shell
    - name: Restore Nuget
      run: Nuget restore ${env:Solution}

    # Runs a multiple command using the runners shell
    - name: Build Solution
      run: msbuild ${env:Solution} /p:Configuration=${env:Configuration}

    - name: Set the version environment variable
      run: |
        $file = ".\src\bin\${env:Configuration}\${env:Bin}"
        $env:WINS_VERSION = $(Get-Item $file).VersionInfo.ProductVersion
        Write-Host WINS_VERSION $env:WINS_VERSION
        echo "::set-env name=WINS_VERSION::$env:WINS_VERSION"
        $env:TIMESTAMP = Get-Date -Format "yyyyMMddHHmmss"
        Write-Host TIMESTAMP $env:TIMESTAMP
        echo "::set-env name=TIMESTAMP::$env:TIMESTAMP"
    - name: Deploy 
      run: .\deploy.ps1 .\bin\ ${env:Configuration}
      shell: powershell

    - name: Zip it! 
      run: Compress-Archive .\bin\* ${env:Project}.zip
      shell: powershell

    - name: Create a Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ env.TIMESTAMP }}
        release_name: Release ${{ env.TIMESTAMP }} (gxcli ${{ env.WINS_VERSION }})

    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${env:Project}.zip
        asset_name: ${env:Project}_${{ env.WINS_VERSION }}).zip
        asset_content_type: application/zip
